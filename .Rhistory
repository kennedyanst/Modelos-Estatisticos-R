ggplot(data=penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "blue")
#Combinando os dados
ggplot(data=penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "blue") +
geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "purple")
#Combinando os dados
ggplot(data=penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y=body_mass_g, linetype=species), color = "blue") +
geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "purple")
#
ggplot(data=penguins) + geom_jitter(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "blue")
#Grafico de barra
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut))
#Grafico de barra
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut), color = "red")
#Grafico de barra
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut, color = cut))
#Grafico de barra
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut, fill = cut))
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut, fill = clarity))
#Combinando os dados
ggplot(data=penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y=body_mass_g, linetype=species), color = "blue") +
geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "purple")
#Suavização
ggplot(data=penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y=body_mass_g, mothod = "loess"), color = "blue") +
geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g,), color = "purple")
#Para criar facetas no grafico com uma unica variavel use = facet_wrap
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  facet_wrap(~species)
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut, fill = cut)) + facet_wrap(~cut)
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut, color = cut)) + facet_wrap(~cut)
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=color, fill = cut)) + facet_wrap(~cut)
#facet_grid cria para duas variaveis
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  facet_grid(sex~species)
#Exemplo de filtragem de dados para criação de gráficos
data %>%
filter(variable1 == "DS") %>%
ggplot(aes(x = weight, y = variable2, colour = variable1)) +
geom_point(alpha = 0.3,  position = position_jitter()) + stat_smooth(method = "lm")
data %>%
filter(variable1 == "DS") %>%
ggplot(aes(x = weight, y = variable2, colour = variable1)) +
geom_point(alpha = 0.3,  position = position_jitter()) + stat_smooth(method = "lm")
#Exemplo de filtragem de dados para criação de gráficos
library(dplyr)
data %>%
filter(variable1 == "DS") %>%
ggplot(aes(x = weight, y = variable2, colour = variable1)) +
geom_point(alpha = 0.3,  position = position_jitter()) + stat_smooth(method = "lm")
#CAMADA DE ANOTAÇÃO
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  facet_wrap(~species)
#CAMADA DE ANOTAÇÃO
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length")
#CAMADA DE ANOTAÇÃO
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample Tree Penguins Species")
#CAMADA DE ANOTAÇÃO
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species")
#CAMADA DE ANOTAÇÃO
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman")
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest")
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = bold, size = 4.5)
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = "bold", size = 4.5)
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = "bold", size = 4.5, angle = 27)
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = "bold", size = 4.5, angle = 45)
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = "bold", size = 4.0, angle = 40)
ggplot(data=penguins) + geom_point(mapping = aes(x = flipper_length_mm, y=body_mass_g, color = species)) +  labs(title = "Palmer Penguins: Body Mass x Flipper length", subtitle =  "Sample of Tree Penguins Species", caption =  "Data collected by Dr. Kristen Gorman") +
annotate("text", x=220, y=3500, label = "The Gentoos are the largest", color = "blue", fontface = "bold", size = 4.0, angle = 35)
#Salvando o grafico
#ggsave() salva o ultimo grafico gerado
ggsave("3_ESPECIES_PINGUINS.png")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, size = year))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut)) + facet_wrap(~color)
dados <- read.table("Usuarios.csv", # Arquivo
sep=",", # Separador de Colunas
dec=".", # Separador de decimal
h= T, #Cabeçalho
fileEncoding = "UTF-8") #Encode do arquivo
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/PowerBIparaDataScience-Curso/Modulo_12")
dados <- read.table("Usuarios.csv", # Arquivo
sep=",", # Separador de Colunas
dec=".", # Separador de decimal
h= T, #Cabeçalho
fileEncoding = "UTF-8") #Encode do arquivo
View(dados)
nivel <- dados$grau_instrucao
print(nivel)
nivel <- unique(dados$grau_instrucao)
print(nivel)
nivel <- unique(dados$grau_instrucao), "total"
nivel <- unique(dados$grau_instrucao) + "total"
nivel <- c(unique(dados$grau_instrucao), "total")
print(nivel)
df <- data.frame(Grau=nivel)
View(df)
freq <- c(table(dados$grau_instrucao), sum(dados$grau_instrucao))
freq <- table(dados$grau_instrucao)
df <- data.frame(Grau=nivel, Freq=freq)
df <- data.frame(Grau=nivel, Freq=c(freq, sum(freq))
View(df)
df <- data.frame(Grau=nivel, Freq=c(freq, sum(freq))
View(df)
View(df)
somaFreq <- sum(freq)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq))
View(df)
freq_rel <- prop.table(dados$grau_instrucao)
freq_rel <- prop.table(freq)
somaFreq_rel <- sum(freq_rel)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq), Freq_rel=c(Freq_rel, somaFreq_rel)
View(df)
View(df)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq), Freq_rel=c(Freq_rel, somaFreq_rel)
View(df)
freq_rel <- prop.table(freq)
somaFreq_rel <- sum(freq_rel)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq), Freq_rela=c(Freq_rel, somaFreq_rel)
View(df)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq), Freq_rela=c(freq_rel, somaFreq_rel)
View(df)
freq <- table(dados$grau_instrucao)
somaFreq <- sum(freq)
freq_rel <- prop.table(freq)
somaFreq_rel <- sum(freq_rel)
df <- data.frame(Grau=nivel, Freq=c(freq, somaFreq), Freq_rela=c(freq_rel, somaFreq_rel)
View(df)
freq_rel <- prop.table(dados$grau_instrucao)
View(freq_rel)
freq_rel <- prop.table(dados$grau_instrucao)[1]
nivel <- c(unique(dados$grau_instrucao), "total")
freq <- table(dados$grau_instrucao)
freq_rel <- prop.table(freq)[1]
View(freq_rel)
# Tabela de Frequência Absoluta
freq <- table(dados$grau_instrucao)
View(frequencia)
dados <- read.table("Usuarios.csv", # Arquivo
sep=",", # Separador de Colunas
dec=".", # Separador de decimal
h= T, #Cabeçalho
fileEncoding = "UTF-8") #Encode do arquivo
# Tabela de Frequência Absoluta
freq <- table(dados$grau_instrucao)
View(freq)
# Tabela de Frequência Relativas
freq_rel <- prop.table(freq)
View(freq_rel)
# Porcentagem
p_freq_rel <- 100* prop.table(freq_rel)
View(p_freq_rel)
# Data Frame
df <- data.frame(freq, freq_rel, p_freq_rel)
View(df)
df$Var1.1 <- NULL
df$ Var1.2 <- NULL
View(df)
# Soma da frequencia relativa
linha <- data.frame(Var1= "Total", Freq= sum(freq), Freq.1=sum(freq_rel), Freq.2=sum(p_freq_rel))
View(linha)
# Adicionando a linha no DF
df2 <- rbind.data.frame(df, linha)
View(df2)
# Renomeando as colunas
`colnames<-`(Var1, "Nivel")
# Renomeando as colunas
colnames(df)[1] <- "Nivel"
View(df)
colnames(df2)[2] <- "Frequência"
colnames(df2)[3] <- "Frequência Relativa"
colnames(df2)[4] <- "Porcentagem"
# Renomeando as colunas
colnames(df2)[1] <- "Nivel"
View(df2)
# Tabela de Frequência Absoluta
freq <- table(dados$grau_instrucao)
round(freq, digits = 2)
View(freq)
round(freq_rel, digits = 2)
View(freq_rel)
# Tabela de Frequência Relativas
freq_rel <- round(prop.table(freq), digits = 2)
View(freq_rel)
# Porcentagem
p_freq_rel <- round(100* prop.table(freq_rel), digits = 2)
View(p_freq_rel)
# Tabela de Frequência Absoluta
freq <- table(dados$grau_instrucao)
# Tabela de Frequência Relativas
freq_rel <- round(prop.table(freq), digits = 2)
# Porcentagem
p_freq_rel <- round(100* prop.table(freq_rel), digits = 2)
# Data Frame
df <- data.frame(freq, freq_rel, p_freq_rel)
df$Var1.1 <- NULL
df$ Var1.2 <- NULL
View(df)
# Soma da frequencia relativa
linha <- data.frame(Var1= "Total",
Freq= sum(freq),
Freq.1=sum(freq_rel),
Freq.2=sum(p_freq_rel))
# Adicionando a linha no DF
df2 <- rbind.data.frame(df, linha)
colnames(df2)[1] <- "Nivel"
colnames(df2)[2] <- "Frequência"
colnames(df2)[3] <- "Frequência Relativa"
colnames(df2)[4] <- "Porcentagem"
View(df2)
# Adicionando a linha no DF
df <- rbind.data.frame(df, linha)
colnames(df)[1] <- "Nivel"
colnames(df)[2] <- "Frequência"
colnames(df)[3] <- "Frequência Relativa"
colnames(df)[4] <- "Porcentagem"
View(df)
install.packages("writexl")
write_xlsx(df,"df.xlsx")
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/PowerBIparaDataScience-Curso/Modulo_12")
write_xlsx(df,"df.xlsx")
write_xlsx(df,"dados_Frequencia.xlsx")
write_xlsx(df,"Modulo_12/dados_Frequencia.xlsx")
library(writexl)
write_xlsx(df,"dados_Frequencia.xlsx")
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/PowerBIparaDataScience-Curso/Modulo_12")
vetor_total_resultados = c(3, 12, 5, 18, 45)
names(vetor_total_resultados) = c("A", "B", "C", "D", "E")
vetor_total_resultados
# Gráfico de Barras
barplot(vetor_total_resultados)
barplot(vetor_total_resultados, col=c(1,2,3,4,5))
# Salvando o gráfico em disco
png("barplot.png", width = 480, height = 480)
barplot(vetor_total_resultados,
col = rgb(0.5,0.1,0.6,0.6),
xlab="Categorias",
ylab="Valores",
main="Barplot em R",
ylim=c(0,60))
dev.off()
# ggplot2
library(ggplot2)
View(mtcars)
ggplot(mtcars, aes(c = as.factor(cyl) )) +
geom_bar()
ggplot(mtcars, aes(c = as.factor(cyl) )) +
geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl) )) +
geom_bar()
ggplot(mtcars, aes(x= as.factor(cyl), fill = as.factor(cyl) )) +
geom_bar() +
scale_fill_manual(values = c("red", "green", "blue"))
# Dados dummy
dados <- data.frame(group = c("A", "B", "C", "D"), value = c(33,62,56,67))
ggplot(dados, aes(x= group, y= value, fill=group )) +
geom_bar(width=0.85, stat= "identify")
# Barplot
ggplot(dados, aes(x= group, y= value, fill=group )) +
geom_bar(width=0.85, stat= "identify")
View(dados)
# Barplot
ggplot(dados, aes(x= group, y= value, fill= group )) +
geom_bar(width=0.85, stat= "identity")
fatias <- c(1,2,3,4,5,12,15,18)
paises <- c("BR", "EUA", "AR", "CH", "RU", "ALE", "ING", "UCR")
pie(fatias, labels=paises, main="Leitura de livors por País")
install.packages("plotrix")
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.1, main="Leitura por País")
# Dados
carros <- c(1,3,5,6,7)
caminhoes <- c(1,5,4,5,12)
# Plot
plot(carros, type="o", col= "blue", ylim= c(0,12))
lines(caminhoes, type="o", pch=22, lty=2, cl="red")
title(main="Produção de vEÍCULOS", col.main="red", font.main=4)
title(main="Produção de Veículos", col.main="red", font.main=4)
# Plot
plot(carros, type="o", col= "blue", ylim= c(0,12))
lines(caminhoes, type="o", pch=22, lty=2, cl="red")
title(main="Produção de Veículos", col.main="red", font.main=4)
# ----- BoxPlot
ggplot(mpg, aes(x= reorder(class, hwy), y= hwy, fill= class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position = "none")
data <- data.frame(cond= rep(c("condition_1", "condition_2"), each=10),
my_x=1:100 + rnorm(100, sd=9), my_y=1:100 + rnorm(100, sd=16))
View(data)
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point((shape=1))
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1)
# Adicionando linha de regressão
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1) +
geom_smooth(method = lm, color="red", se=FALSE)
# Adicionando SMOOTH
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1) +
geom_smooth(method = lm, color="red", se=TRUE)
# ---- Treemap
install.packages("treemap")
libraty(treemap)
library(treemap)
# Dados
grupo <- c(rep("group-1", 4), rep("group-2", 2), rep("group-3", 3))
subgroupo <- paste("subgroup", c(1,2,3,4,1,2,1,2,3), sep="-")
valor <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(groupo, subgroupo, valor)
# Dados
grupo <- c(rep("group-1", 4), rep("group-2", 2), rep("group-3", 3))
subgroupo <- paste("subgroup", c(1,2,3,4,1,2,1,2,3), sep="-")
valor <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(gropo, subgroupo, valor)
# Dados
grupo <- c(rep("group-1", 4), rep("group-2", 2), rep("group-3", 3))
subgroupo <- paste("subgroup", c(1,2,3,4,1,2,1,2,3), sep="-")
valor <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(grupo, subgroupo, valor)
View(data)
treemap(dados,
index= c("grupo", "subgrupo"),
vSize = "valor",
type= "index",
fontsize.labels = c(15,12),
fontcolor.labels = c("white", "orange"),
fontface.labels = c(2,1),
bg.labels=220,
align.labels = list(c("center", "center"), c("rigth", "bottom")),
overlap.labels = 0.5,
inflate.labels = F)
treemap(data,
index= c("grupo", "subgrupo"),
vSize = "valor",
type= "index",
fontsize.labels = c(15,12),
fontcolor.labels = c("white", "orange"),
fontface.labels = c(2,1),
bg.labels=220,
align.labels = list(c("center", "center"), c("rigth", "bottom")),
overlap.labels = 0.5,
inflate.labels = F)
# Dados
grupo <- c(rep("group-1", 4), rep("group-2", 2), rep("group-3", 3))
subgrupo <- paste("subgroup", c(1,2,3,4,1,2,1,2,3), sep="-")
valor <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(grupo, subgrupo, valor)
treemap(data,
index= c("grupo", "subgrupo"),
vSize = "valor",
type= "index",
fontsize.labels = c(15,12),
fontcolor.labels = c("white", "orange"),
fontface.labels = c(2,1),
bg.labels=220,
align.labels = list(c("center", "center"), c("rigth", "bottom")),
overlap.labels = 0.5,
inflate.labels = F)
treemap(data,
index= c("grupo", "subgrupo"),
vSize = "valor",
type= "index",
fontsize.labels = c(15,12),
fontcolor.labels = c("white", "orange"),
fontface.labels = c(2,1),
bg.labels=220,
align.labels = list(c("center", "center"), c("right", "bottom")),
overlap.labels = 0.5,
inflate.labels = F)
# Invertendo a ordem do TreeMap
treemap(data,
index=c("grupo", "subgrupo"),
vSize = "valor",
type="index",
border.col = c("black", "white"),
border.lwds = c(7,2))
# Criando o histograma
h <- hist(x,
breaks= 10,
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
mpg
# Criando o histograma
h <- hist(x,
breaks= 10,
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Criando o histograma
h <- hist(X,
breaks= 10,
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Gerando valores para x
X <- mtcars$mpg
# Criando o histograma
h <- hist(X,
breaks= 10,
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Criando o histograma
h <- hist(X,
breaks= 10,
col <- "blue"
xlab= "Milhas Por Galão",
# Criando o histograma
h <- hist(X,
breaks= 10,
col <- "blue",
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Criando o histograma
h <- hist(X,
breaks= 10,
col <- "red",
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Criando o histograma
h <- hist(X,
breaks= 10,
col= "blue",
xlab= "Milhas Por Galão",
main = "Histograma com Curva de Distribuição",
)
# Customizando o histograma
xfit <- seq(min(x), max(x), length=40)
X <- mtcars$mpg
# Customizando o histograma
xfit <- seq(min(X), max(X), length=40)
yfit <- dnorm(xfit, mean= mean(X), sd = sd(X))
yfit <- yfit*diff(h$mids[1:2]) * length(X)
lines(xfit, yfit, col="red", lwd=2)
dados <- data.frame(value=rnorm(10000))
# Tamanho das colunas
ggplot(dados, aes(x=value)) +
geom_histogram(binwidth = 0.05)
# Cor Uniforme
ggplot(dados, aes(x=value)) +
geom_histogram(binwidth =0.2, color="white", fill=rgb(0.2,0.7,0.1,0.4))
# Cor propocional
ggplot(dados, aes(x=value)) +
geom_histogram(binwidth = 0.2, aes(fill=..count..))
# Selecionando a pasta
#
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/PowerBIparaDataScience-Curso/Modulo_12")
# Carregando os dados
vendas <- read.csv("Vendas.csv", fileEncoding = "windows-1252")
# Carregando o ggplot2 e Criando o gráfico
library(ggplot2)
qplot(Valor, Custo, data= vendas)
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/PowerBIparaDataScience-Curso/Modulo_12")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("data.table")
library(dplyr)
library(data.table)
library(ggplot2)
dados_iris <- iris
View(dados_iris)
media_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.Width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.Width))
View(media_iris)
# Tarefa 2 - Extrair o valor inteiro de uma das colunas decimais
library(data.table)
# Tarefa 2 - Extrair o valor inteiro de uma das colunas decimais
library(data.table)
dados_iris_id <- data.table(dados_iris)
View(dados_iris_id)
dados_iris_id$Sepal.Length <- as.integer(dados_iris_id$Sepal.Length)
View(dados_iris_id)
dados_iris_id <- data.table(dados_iris)
dados_iris_id$Sepal.Length <- as.integer(dados_iris_id$Sepal.Length)
# Tarefa 3 - Construindo um gráfico mostrando a relação de duas variáveis numéricas para 3 categoricas
ggplot(data= dados_iris, aes(x= Petal.Width, y= Petal.Length)) +
geom_point(aes(color= Species), size=3) +
ggtitle("Largura e Comprimento das Pétalas") +
labs(x= "Largura da Pétala", y= "Comprimento d Pétala") +
theme_bw() +
theme(title = element_text(size= 15, color= "turquoise4"))
# Cores disponíveis da Linhaguem R
colors()
# Tarefa 3 - Construindo um gráfico mostrando a relação de duas variáveis numéricas para 3 categoricas
ggplot(data= dados_iris, aes(x= Petal.Width, y= Petal.Length)) +
geom_point(aes(color= Species), size=3) +
ggtitle("Largura e Comprimento das Pétalas") +
labs(x= "Largura da Pétala", y= "Comprimento d Pétala") +
theme_bw() +
theme(title = element_text(size= 15, color= "violetred2"))
